package muticastMsgs;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.MulticastSocket;

public class MulticastChannelMsg extends Thread {

	public int port;
	public String adr;
	MulticastSocket msocket;
	InetAddress maddress;

	boolean initiatorPeer;
	String messageType;
	String fileID;
	String version;
	int chunkNR;
	int replicationDegree;
	int type;
	String msg;

	public MulticastChannelMsg(String msgtype, String adr, int port, String msg) throws IOException {
		super("MulticastChannel");
		messageType = msgtype;
		this.adr = adr;
		this.port = port;
		msocket = new MulticastSocket(port);
		maddress = InetAddress.getByName(adr);
		if(type==1)
			msocket.joinGroup(maddress);
		this.type=type;
		this.msg=msg;
		version="1.0";
	}

	public String receivePacket() {
		try{
			byte[] data = new byte[1024];
			DatagramPacket packet = new DatagramPacket(data,data.length);
			msocket.receive(packet);
			String msg = new String(packet.getData());
			System.out.println("Message received: "+ msg);
			return msg;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "";
	}

	public void sendPacket(String msg) {

		try{
			DatagramSocket socket = new DatagramSocket();

			byte[] buffer = new byte[msg.length()];
			buffer = msg.getBytes();

			DatagramPacket sendPacket = new DatagramPacket(buffer, buffer.length, maddress, port);
			socket.send(sendPacket);
			socket.close();
			System.out.println("Message sent.");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	protected String msgHeader() {
		byte[] CRLFseq = {0xD, 0xA};
		String CRLF = new String(CRLFseq);
		String header = messageType+" "+version+" "+fileID+" "+chunkNR+" "+replicationDegree+" "+CRLF;
		return header;
	}

	public void processMsg(String msg) {
	}

	public void run() {
		System.out.println("at MCMsg run");
		if(type==0) {
			sendPacket(msg);
		}
		else {
			receivePacket();
		}
	}

}
