import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;

import muticastMsgs.MControlMsg;
import muticastMsgs.MDBackupMsg;


public class Peer {

	/**
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException {

		MControlMsg mc = new MControlMsg("230.0.0.1",1200);
		mc.start();
		
		menu();
	}

	private static void menu() throws IOException {
		
		@SuppressWarnings("resource")
		Scanner sc = new Scanner(System.in);
		while(true) {
			
			System.out.println("Please Make a selection:"); 
	        System.out.println("[1] Send putchunk message"); 
	       // System.out.println("[2] Open an existing record"); 
	        System.out.println("[3] exit"); 
	        
	        System.out.println("Selection: "); 
			int selection=sc.nextInt();     
	       
	       switch (selection){
	             
	           case 1: backupRequest();
	           //System.out.println("Message: ");
	           break;
	             
	        
	           //case 2:System.out.println("Opening existing record");
	            //    break;
	             
	        
	           case 3:System.out.println("Exit Successful");
	                System.exit(0);
	                        
	           default:System.out.println("Please enter a valid selection.");
	           
	       };
			
			//send msg
			
		}
		
	}
	
	private static void backupRequest() throws IOException {
		
		//Escolher ficheiro
		//split do ficheiro
		
		//ciclo para enviar todos os chunks do ficheiro
		
		BufferedReader inputStream = new BufferedReader(new InputStreamReader(System.in));
	    String sentence = inputStream.readLine();
	    
	    MDBackupMsg mdbMsg = new MDBackupMsg(adr, port);
	    
	}

}
